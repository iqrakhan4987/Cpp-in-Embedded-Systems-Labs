#include "mbed.h"
#include "platform/mbed_thread.h"
#include "Servo.h"


Servo myservo(D6); // PWM pin for servo control
Serial pc(USBTX, USBRX);


DigitalOut trigger(D10); // Trigger PIN
DigitalIn echo(D9); // Echo PIN
DigitalOut led(D7); // LED PIN


Timer get_time; // Timer to get the time between the trigger and echo


float sensor(void); // Function prototype for the sensor function


int main(void)
{
    float pos = 0.0f; // Initialize pos to 0 degrees


    while (1) {
        // Loop indefinitely


        for (int i = 0; i < 200; i++) {
            // Loop from 0 to 199 (200 iterations)


            myservo = i / 200.0; // Set servo position
            pos = myservo; // Update pos variable with current position
            thread_sleep_for(50); // Pause execution for 50 milliseconds
            int angle = pos * 180.0f; // Convert servo position to angle in degrees
            int distance = sensor(); // Get distance from ultrasonic sensor
            pc.printf("%d,%d.", angle, distance); // Print angle and distance
        }


        for (int i = 200; i > 0; i--) {
            // Loop from 200 to 1 (200 iterations)


            myservo = i / 200.0; // Set servo position
            pos = myservo; // Update pos variable with current position
            thread_sleep_for(50); // Pause execution for 50 milliseconds
            int angle = pos * 180.0f; // Convert servo position to angle in degrees
            int distance = sensor(); // Get distance from ultrasonic sensor
            pc.printf("%d,%d.", angle, distance); // Print angle and distance
        }


        pos = 0.0f; // Reset servo position to 0 degrees
    }
}


float sensor(void)
{
    float distance;


    // Send HIGH for 10 us to start measurement
    trigger.write(1);
    wait_us(10);
    trigger.write(0);


    // Wait for the ECHO to change to HIGH
    while (echo.read() == 0) {}


    // Start the timer and let it run until ECHO is LOW again
    get_time.reset();
    get_time.start();
    while (echo.read() == 1) {}
    get_time.stop();


    // Calculate the distance from the time in microseconds
    distance = get_time.read_us();
    distance = distance * 0.03432f / 2.0f;


    // Check if the distance is less than 20.0f and blink the LED if true
    if (distance < 20.0f) {
        led = 1;
        thread_sleep_for(10);
        led = 0;
    }


    return distance; // Return the measured distance
}
